<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>0023-树莓派相关</title>
      <link href="/2019/06/02/0023-RaspBerryPi/"/>
      <url>/2019/06/02/0023-RaspBerryPi/</url>
      
        <content type="html"><![CDATA[<h3 id="1、连接WiFi"><a href="#1、连接WiFi" class="headerlink" title="1、连接WiFi"></a>1、连接WiFi</h3><p>（1）将树莓派外接一个显示器（可用HDMI接口），键盘<br>（2）找到/etc/wpa_supplicant/wpa_supplicant.conf文件，修改其中的WifiID（ssid）及密码（psk）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"> </span><br><span class="line">network=&#123;</span><br><span class="line">        ssid=&quot;***&quot;</span><br><span class="line">        key_mgmt=WPA-PSK</span><br><span class="line">        psk=&quot;***&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（3）重启树莓派<br>（4）查询获取到的IP，观察wlan0中IP信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:/# ifconfig</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr b8:27:eb:XX:XX:XX  </span><br><span class="line">          inet6 addr: fe80::6d6a:35f5:5f5c:2351/64 Scope:Link</span><br><span class="line">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:203842 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:203842 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:82362372 (78.5 MiB)  TX bytes:82362372 (78.5 MiB)</span><br><span class="line"></span><br><span class="line">wlan0     Link encap:Ethernet  HWaddr b8:27:eb:XX:XX:XX  </span><br><span class="line">          inet addr:192.168.XX.XXX  Bcast:192.168.31.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::ba27:ebff:fecb:d88e/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:191486 errors:0 dropped:19 overruns:0 frame:0</span><br><span class="line">          TX packets:278266 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:18741736 (17.8 MiB)  TX bytes:50965793 (48.6 MiB)</span><br></pre></td></tr></table></figure></p><h3 id="2、samba服务"><a href="#2、samba服务" class="headerlink" title="2、samba服务"></a>2、samba服务</h3><p>（1）添加samba用户<br><figure class="highlight plain"><figcaption><span>smbpasswd -a root</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo smbpasswd -a root</span><br></pre></td></tr></table></figure></p><p>然后输入相应的密码</p><p>（2）重启、停止samba服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/samba restart</span><br><span class="line">sudo /etc/init.d/samba stop</span><br></pre></td></tr></table></figure></p><h3 id="3、安装vim编辑器"><a href="#3、安装vim编辑器" class="headerlink" title="3、安装vim编辑器"></a>3、安装vim编辑器</h3><p>（1）首先删除默认vi编辑器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove vim-common</span><br></pre></td></tr></table></figure></p><p>（2）然后重装vim<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure></p><p>（3）优化vim配置<br>为方便使用，需在/etc/vim/vimrc文件后面添加下面三句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set nu  #显示行号</span><br><span class="line">syntax on  #语法高亮</span><br><span class="line">set tabstop=4  #tab退四格</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0022-工具技巧</title>
      <link href="/2019/05/31/0022-EfficiencyToolSkills/"/>
      <url>/2019/05/31/0022-EfficiencyToolSkills/</url>
      
        <content type="html"><![CDATA[<h3 id="1、SecureCRT保存日志"><a href="#1、SecureCRT保存日志" class="headerlink" title="1、SecureCRT保存日志"></a>1、SecureCRT保存日志</h3><p>（1） 打开<code>Options-&gt;Session Options...</code>，，选择<code>LogFile</code><br>（2） Log file name格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%H_%S_%Y%M%D-%h%m%s.log</span><br></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%H---主机IP</span><br><span class="line">%S---Session名</span><br><span class="line">%Y%M%D---年月日</span><br><span class="line">%h%m%s---时分秒</span><br></pre></td></tr></table></figure><h3 id="2、VS（Visual-Studio）输出重定向到文件"><a href="#2、VS（Visual-Studio）输出重定向到文件" class="headerlink" title="2、VS（Visual Studio）输出重定向到文件"></a>2、VS（Visual Studio）输出重定向到文件</h3><p>（1）、右键点击解决工程-&gt;项目属性</p><p>（2）、配置属性-&gt;生成事件-&gt;生成后事件</p><p>在命令行中输入<code>&quot;$(TargetPath)  &gt;$(outdir)\1.txt&quot;</code></p><p>（3）、重新编译整个项目，此时就会在debug目录下多了一个1.txt文件，里面就是程序运行时的控制台输出结果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0021-安全技术</title>
      <link href="/2019/05/31/0021-SecurityTechnology/"/>
      <url>/2019/05/31/0021-SecurityTechnology/</url>
      
        <content type="html"><![CDATA[<p>1、Kali中面向WiFi的工具，像Aircrack-ng、Kismet、以及 Pixie。<br>2、对于破解密码，它也有像 Hydra、Crunch、Hashcat、以及 John the Ripper 这样的工具。</p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全相关 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0020-Linux-samba服务</title>
      <link href="/2019/05/31/0020-Linux-samba/"/>
      <url>/2019/05/31/0020-Linux-samba/</url>
      
        <content type="html"><![CDATA[<p>1、查看samba服务状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service smb status</span><br></pre></td></tr></table></figure><p>2、启动samba服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service smb start</span><br></pre></td></tr></table></figure></p><p>3、停止samba服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service smb stop</span><br></pre></td></tr></table></figure><p>4、samba配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/samba/smb.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> samba </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0019_第一个Java程序</title>
      <link href="/2018/11/07/0019-Java-HelloWorld/"/>
      <url>/2018/11/07/0019-Java-HelloWorld/</url>
      
        <content type="html"><![CDATA[<h3 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h3><p>打开Eclipse，依次点击”File”-&gt;”New”-&gt;”Java Project”，输入Project Name，点击完成</p><img src="/2018/11/07/0019-Java-HelloWorld/CreateNewJavaProject.png" title="pic:创建一个Java工程"><p>右击工程名，选择”New”-&gt;”Class”，输入类名：”HelloWorld”，点击完成，并输入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击 Run，运行程序，输出如下：</p><img src="/2018/11/07/0019-Java-HelloWorld/ExecuteResult.png" title="pic:执行结果">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0018_Java开发环境配置</title>
      <link href="/2018/11/07/0018-JavaJDKInstall/"/>
      <url>/2018/11/07/0018-JavaJDKInstall/</url>
      
        <content type="html"><![CDATA[<h3 id="下载Java-JDK"><a href="#下载Java-JDK" class="headerlink" title="下载Java JDK"></a>下载Java JDK</h3><p>首先<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html" target="_blank" rel="noopener"><font color="blue">下载Java JDK</font></a>，根据自己的系统选择对应的版本：<br><img src="/2018/11/07/0018-JavaJDKInstall/DownloadJDK.png" title="pic:下载JDK"></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>安装完成后，右击”计算机”-&gt;”属性”-&gt;”高级系统设置”-&gt;”环境变量”<br>在”系统变量”中设置3项属性，JAVA_HOME,PATH,CLASSPATH(大小写无所谓),若已存在则点击”编辑”，不存在则点击”新建”。</p><ul><li>变量名：JAVA_HOME</li><li>变量取值：C:\Program Files\Java\jdk-11.0.1</li><li>变量名：CLASSPATH</li><li>变量取值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;  //记得前面有个”.”</li><li>变量名：Path</li><li>变量取值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</li></ul><h3 id="测试JDK是否安装成功"><a href="#测试JDK是否安装成功" class="headerlink" title="测试JDK是否安装成功"></a>测试JDK是否安装成功</h3><p>1、”开始”-&gt;”运行”，键入”cmd”；<br>2、键入命令: java -version、java、javac 几个命令，出现以下信息，说明环境变量配置成功；<br><img src="/2018/11/07/0018-JavaJDKInstall/TestJDK.png" title="pic:测试JDK是否安装成功"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo博客技术</title>
      <link href="/2018/10/28/hello-world/"/>
      <url>/2018/10/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="创建一篇新博客"><a href="#创建一篇新博客" class="headerlink" title="创建一篇新博客"></a>创建一篇新博客</h2><h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="运行Server"><a href="#运行Server" class="headerlink" title="运行Server"></a>运行Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>在启动Server后，可通过在浏览器中输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，来预览页面效果。</p><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="部署到远端"><a href="#部署到远端" class="headerlink" title="部署到远端"></a>部署到远端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gdb调试</title>
      <link href="/2018/10/27/0017-Linux-gdb/"/>
      <url>/2018/10/27/0017-Linux-gdb/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用gdb调试前，在编译程序时，要加 -g 选项，否则你将看不见程序的函数名、变量名，所代替的全是运行时的内存地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb -q a.out // -q(uiet)表示不打印gdb的版权信息</span><br></pre></td></tr></table></figure><h3 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h3><h4 id="运行参数"><a href="#运行参数" class="headerlink" title="运行参数"></a>运行参数</h4><blockquote><p>set args 可指定运行时参数。（如：set args 10 20 30 40 50）<br>show args 命令可以查看设置好的运行参数。</p></blockquote><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><blockquote><p>path <dir> 可设定程序的运行路径。<br>show paths 查看程序的运行路径。<br>set environment varname [=value] 设置环境变量。如：set env USER=hchen<br>show environment [varname] 查看环境变量。</dir></p></blockquote><h4 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h4><blockquote><p>cd <dir> 相当于shell的cd命令。<br>pwd 显示当前的所在目录。</dir></p></blockquote><h3 id="设置观察点"><a href="#设置观察点" class="headerlink" title="设置观察点"></a>设置观察点</h3><p>观察点一般来观察某个表达式（变量也是一种表达式）的值是否有变化了，如果有变化，马上停住程序。我们有下面的几种方法来设置观察点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch &lt;expr&gt;</span><br></pre></td></tr></table></figure><p>为表达式（变量）expr设置一个观察点。一量表达式值有变化时，马上停住程序。[如watch i==100，当该条件成立时程序会暂停执行]</p><p>观察某个地址的数据变化  watch <em>(int</em>)0x00000000</p><h3 id="分割窗口"><a href="#分割窗口" class="headerlink" title="分割窗口"></a>分割窗口</h3><blockquote><p>layout：用于分割窗口，可以一边查看代码，一边测试：<br>layout src：显示源代码窗口<br>layout asm：显示反汇编窗口<br>layout regs：显示源代码/反汇编和CPU寄存器窗口<br>layout split：显示源代码和反汇编窗口<br>Ctrl + L：刷新窗口</p></blockquote><h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h3><h4 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h4><blockquote><p>a.  gdb <program> </program></p><p>program也就是你的执行文件，一般在当前目录下。</p><p>b. gdb <program> core</program></p><p>用gdb同时调试一个运行程序和core文件，core是程序非法执行后core dump后产生的文件。</p></blockquote><h4 id="列出源码"><a href="#列出源码" class="headerlink" title="列出源码"></a>列出源码</h4><blockquote><p>从第n行开始（编译时要加 -g 选项）</p><p>l n</p></blockquote><h4 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">break n //在第n行添加断点</span><br><span class="line">break func //在函数func入口处添加断点</span><br></pre></td></tr></table></figure><h4 id="查看断点信息"><a href="#查看断点信息" class="headerlink" title="查看断点信息"></a>查看断点信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info break</span><br></pre></td></tr></table></figure><h4 id="断点命中后自动打印调用栈"><a href="#断点命中后自动打印调用栈" class="headerlink" title="断点命中后自动打印调用栈"></a>断点命中后自动打印调用栈</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set pagination off</span><br><span class="line">b malloc</span><br><span class="line">commands 1 （1表示断点编号，用i b可以查询所有断点）</span><br><span class="line">bt</span><br><span class="line">continue</span><br><span class="line">end</span><br><span class="line">c</span><br></pre></td></tr></table></figure><h4 id="单步执行"><a href="#单步执行" class="headerlink" title="单步执行"></a>单步执行</h4><blockquote><p>n —&gt;next的首字母</p></blockquote><h4 id="继续执行"><a href="#继续执行" class="headerlink" title="继续执行"></a>继续执行</h4><blockquote><p>c —&gt;continue的首字母</p></blockquote><h4 id="打印变量的值"><a href="#打印变量的值" class="headerlink" title="打印变量的值"></a>打印变量的值</h4><blockquote><p>p varname</p></blockquote><h4 id="查看调用栈"><a href="#查看调用栈" class="headerlink" title="查看调用栈"></a>查看调用栈</h4><blockquote><p>bt</p></blockquote><h4 id="退出函数"><a href="#退出函数" class="headerlink" title="退出函数"></a>退出函数</h4><blockquote><p>finish</p></blockquote><h4 id="退出gdb"><a href="#退出gdb" class="headerlink" title="退出gdb"></a>退出gdb</h4><blockquote><p>q —&gt;quit的首字母</p></blockquote><h4 id="gdb中执行shell命令"><a href="#gdb中执行shell命令" class="headerlink" title="gdb中执行shell命令"></a>gdb中执行shell命令</h4><blockquote><p>shell <command string></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>grep命令</title>
      <link href="/2018/10/27/0016-Linux-Command-grep/"/>
      <url>/2018/10/27/0016-Linux-Command-grep/</url>
      
        <content type="html"><![CDATA[<h4 id="在文件test-txt中查找”hello”关键字以及前后5行的内容"><a href="#在文件test-txt中查找”hello”关键字以及前后5行的内容" class="headerlink" title="在文件test.txt中查找”hello”关键字以及前后5行的内容"></a>在文件test.txt中查找”hello”关键字以及前后5行的内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -C 5 "hello" test.txt</span><br></pre></td></tr></table></figure><h4 id="搜索test-txt中含有关键字”hello”的行号"><a href="#搜索test-txt中含有关键字”hello”的行号" class="headerlink" title="搜索test.txt中含有关键字”hello”的行号"></a>搜索test.txt中含有关键字”hello”的行号</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n "hello" test.txt</span><br></pre></td></tr></table></figure><h4 id="查看test第13-15行"><a href="#查看test第13-15行" class="headerlink" title="查看test第13-15行"></a>查看test第13-15行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n '13,15p' test.txt</span><br></pre></td></tr></table></figure><h4 id="统计当前文件夹下目录的个数"><a href="#统计当前文件夹下目录的个数" class="headerlink" title="统计当前文件夹下目录的个数"></a>统计当前文件夹下目录的个数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l|grep "^d"|wc -l</span><br></pre></td></tr></table></figure><h4 id="统计文件夹下目录的个数，包括子文件夹里的"><a href="#统计文件夹下目录的个数，包括子文件夹里的" class="headerlink" title="统计文件夹下目录的个数，包括子文件夹里的"></a>统计文件夹下目录的个数，包括子文件夹里的</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR|grep "^d"|wc -l</span><br></pre></td></tr></table></figure><h4 id="统计当前文件夹下文件的个数"><a href="#统计当前文件夹下文件的个数" class="headerlink" title="统计当前文件夹下文件的个数"></a>统计当前文件夹下文件的个数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l |grep "^-"|wc -l</span><br></pre></td></tr></table></figure><h4 id="统计当前文件夹下文件的个数，包括子文件夹里的"><a href="#统计当前文件夹下文件的个数，包括子文件夹里的" class="headerlink" title="统计当前文件夹下文件的个数，包括子文件夹里的"></a>统计当前文件夹下文件的个数，包括子文件夹里的</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR|grep "^-"|wc -l</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grep命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux学习</title>
      <link href="/2018/10/27/0015-LearnLinux/"/>
      <url>/2018/10/27/0015-LearnLinux/</url>
      
        <content type="html"><![CDATA[<h3 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h3><blockquote><p>进程的调度和管理</p><p>内存的管理</p><p>文件系统的管理</p><p>设备驱动程序的管理</p><p>网络资源的管理</p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>1、[功能] 统计文本文件行数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc -l filename</span><br></pre></td></tr></table></figure><p>2、[功能] 删除当前目录下除a、b外的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls|grep -v 'a\|b'|xargs rm -rf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux、学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>/proc/$PID/maps文件解读</title>
      <link href="/2018/10/27/0014-proc-maps/"/>
      <url>/2018/10/27/0014-proc-maps/</url>
      
        <content type="html"><![CDATA[<p>Each row in /proc/$PID/maps describes a region of contiguous virtual memory in a process or thread. Each row has the following fields:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">address           perms offset  dev   inode   pathname</span><br><span class="line">08048000-08056000 r-xp 00000000 03:0c 64593   /usr/sbin/gpm</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>address</strong> - This is the starting and ending address of the region in the process’s address space</li><li><strong>permissions</strong> - This describes how pages in the region can be accessed. There are four different permissions: read, write, execute, and shared. If read/write/execute are disabled, a ‘-‘ will appear instead of the ‘r’/‘w’/‘x’. If a region is not shared, it is private, so a ‘p’ will appear instead of an ‘s’. If the process attempts to access memory in a way that is not permitted, a segmentation fault is generated. Permissions can be changed using the mprotect system call.</li><li><strong>offset</strong> - If the region was mapped from a file (using mmap), this is the offset in the file where the mapping begins. If the memory was not mapped from a file, it’s just 0.</li><li><strong>device</strong> - If the region was mapped from a file, this is the major and minor device number (in hex) where the file lives.</li><li><strong>inode</strong> - If the region was mapped from a file, this is the file number.</li><li><strong>pathname</strong> - If the region was mapped from a file, this is the name of the file. This field is blank for anonymous mapped regions. There are also special regions with names like [heap], [stack], or [vdso]. [vdso] stands for virtual dynamic shared object. It’s used by system calls to switch to kernel mode.</li></ul></blockquote><p>You might notice a lot of anonymous regions. These are usually created by <code>mmap</code> but are not attached to any file. They are used for a lot of miscellaneous things like shared memory or buffers not allocated on the heap. For instance, I think the pthread library uses anonymous mapped regions as stacks for new threads.</p>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proc maps </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swap交换分区概念</title>
      <link href="/2018/10/27/LinuxSwap/"/>
      <url>/2018/10/27/LinuxSwap/</url>
      
        <content type="html"><![CDATA[<p>Linux divides its physical RAM (random access memory) into chucks of memory called pages. Swapping is the process whereby a page of memory is copied to the preconfigured space on the hard disk, called swap space, to free up that page of memory. The combined sizes of the physical memory and the swap space is the amount of virtual memory available.</p><p>Swap space in Linux is used when the amount of physical memory (RAM) is full. If the system needs more memory resources and the RAM is full, inactive pages in memory are moved to the swap space. While swap space can help machines with a small amount of RAM, it should not be considered a replacement for more RAM. Swap space is located on hard drives, which have a slower access time than physical memory.Swap space can be a dedicated swap partition (recommended), a swap file, or a combination of swap partitions and swap files.</p>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TCP通信-客户端和服务端代码</title>
      <link href="/2018/10/27/TCP-Communication/"/>
      <url>/2018/10/27/TCP-Communication/</url>
      
        <content type="html"><![CDATA[<h3 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"ws2_32.lib"</span>)</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SOCKET soc;</span><br><span class="line">    SOCKADDR_IN serverAddr;</span><br><span class="line">    SOCKADDR_IN clientAddr;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">  </span><br><span class="line">    WSADATA wsa;</span><br><span class="line">    WSAStartup(MAKEWORD(<span class="number">1</span>,<span class="number">1</span>),&amp;wsa);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> ((soc = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP)) &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"create socket fail!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    serverAddr.sin_family = AF_INET;</span><br><span class="line">    serverAddr.sin_port = htons(<span class="number">4999</span>);</span><br><span class="line">    serverAddr.sin_addr.S_un.S_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (connect(soc,(SOCKADDR *)&amp;serverAddr,<span class="keyword">sizeof</span>(serverAddr)) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect fail!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,buf);</span><br><span class="line">        <span class="keyword">if</span> (send(soc,(<span class="keyword">const</span> <span class="keyword">char</span> *)buf,<span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)buf)+<span class="number">1</span>,<span class="number">0</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Error!\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"ws2_32.lib"</span>)</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> BUF_SIZE = <span class="number">64</span>;</span><br><span class="line"> </span><br><span class="line">    WSADATA wsd; <span class="comment">//WSADATA变量</span></span><br><span class="line">    SOCKET sServer; <span class="comment">//服务器套接字</span></span><br><span class="line">    SOCKET sClient; <span class="comment">//客户端套接字</span></span><br><span class="line">    SOCKADDR_IN addrServ;; <span class="comment">//服务器地址</span></span><br><span class="line">    <span class="keyword">char</span> buf[BUF_SIZE]; <span class="comment">//接收数据缓冲区</span></span><br><span class="line">    <span class="keyword">char</span> sendBuf[BUF_SIZE];<span class="comment">//返回给客户端得数据</span></span><br><span class="line">    <span class="keyword">int</span> retVal; <span class="comment">//返回值</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//初始化套结字动态库</span></span><br><span class="line">    <span class="keyword">if</span> (WSAStartup(MAKEWORD(<span class="number">2</span>,<span class="number">2</span>), &amp;wsd) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"WSAStartup failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建套接字</span></span><br><span class="line">    sServer = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span>(INVALID_SOCKET == sServer)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"socket failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        WSACleanup();<span class="comment">//释放套接字资源;</span></span><br><span class="line">        <span class="keyword">return</span>  <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//服务器套接字地址</span></span><br><span class="line">    addrServ.sin_family = AF_INET;</span><br><span class="line">    addrServ.sin_port = htons(<span class="number">4999</span>);</span><br><span class="line">    addrServ.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    <span class="comment">//绑定套接字</span></span><br><span class="line">    retVal = bind(sServer, (LPSOCKADDR)&amp;addrServ, <span class="keyword">sizeof</span>(SOCKADDR_IN));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(SOCKET_ERROR == retVal)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"bind failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        closesocket(sServer); <span class="comment">//关闭套接字</span></span><br><span class="line">        WSACleanup(); <span class="comment">//释放套接字资源;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始监听</span></span><br><span class="line">    retVal = listen(sServer, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(SOCKET_ERROR == retVal)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"listen failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        closesocket(sServer); <span class="comment">//关闭套接字</span></span><br><span class="line">        WSACleanup(); <span class="comment">//释放套接字资源;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接受客户端请求</span></span><br><span class="line">    sockaddr_in addrClient;</span><br><span class="line">    <span class="keyword">int</span> addrClientlen = <span class="keyword">sizeof</span>(addrClient);</span><br><span class="line">    sClient = accept(sServer,(sockaddr FAR*)&amp;addrClient, &amp;addrClientlen);</span><br><span class="line">    <span class="keyword">if</span>(INVALID_SOCKET == sClient)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"accept failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        closesocket(sServer); <span class="comment">//关闭套接字</span></span><br><span class="line">        WSACleanup(); <span class="comment">//释放套接字资源;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//接收客户端数据</span></span><br><span class="line">        ZeroMemory(buf, BUF_SIZE);</span><br><span class="line">        retVal = recv(sClient, buf, BUF_SIZE, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (SOCKET_ERROR == retVal)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"recv failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            closesocket(sServer); <span class="comment">//关闭套接字</span></span><br><span class="line">            closesocket(sClient); <span class="comment">//关闭套接字</span></span><br><span class="line">            WSACleanup(); <span class="comment">//释放套接字资源;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(buf[<span class="number">0</span>] == <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"客户端发送的数据: "</span> &lt;&lt; buf &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"向客户端发送数据: "</span> ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; sendBuf;</span><br><span class="line">        send(sClient, sendBuf, <span class="built_in">strlen</span>(sendBuf), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//退出</span></span><br><span class="line">    closesocket(sServer); <span class="comment">//关闭套接字</span></span><br><span class="line">    closesocket(sClient); <span class="comment">//关闭套接字</span></span><br><span class="line">    WSACleanup(); <span class="comment">//释放套接字资源;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP通信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git命令</title>
      <link href="/2018/10/26/GitFAQ/"/>
      <url>/2018/10/26/GitFAQ/</url>
      
        <content type="html"><![CDATA[<h3 id="git工作流示意图"><a href="#git工作流示意图" class="headerlink" title="git工作流示意图"></a>git工作流示意图</h3><img src="/2018/10/26/GitFAQ/git-workflow.jpg" title="pic:git工作流示意图"><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到<code>git clone</code>命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;版本库的网址&gt;</span><br></pre></td></tr></table></figure></p><p>比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:cgc0415/hello-world.git</span><br></pre></td></tr></table></figure></p><p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为<code>git clone</code>命令的第二个参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure></p><h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。<code>git remote</code>命令就用于管理主机名。<br>不带选项的时候，<code>git remote</code>命令列出所有远程主机。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure></p><p>使用<code>-v</code>选项，可以参看远程主机的网址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:cgc0415/hello-world.git (fetch)</span><br><span class="line">origin  git@github.com:cgc0415/hello-world.git (push)</span><br></pre></td></tr></table></figure></p><p>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。</p><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p><code>git pull</code>命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><p>比如，取回<code>origin</code>主机的<code>next</code>分支，与本地的<code>master</code>分支合并，需要写成下面这样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin next:master</span><br></pre></td></tr></table></figure></p><p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在<code>git clone</code>的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的<code>master</code>分支自动”追踪”<code>origin/master</code>分支。<br>如果当前分支与远程分支存在追踪关系，且远端只有一个追踪分支，则直接执行<code>git pull</code>就可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure><p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与<code>git pull</code>命令相仿。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><p>如果省略远程分支名，则表示将本地分支推送到与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p><p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。<br>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :master</span><br><span class="line"># 等同于</span><br><span class="line">$ git push origin --delete master</span><br></pre></td></tr></table></figure></p><p>上面命令表示删除origin主机的master分支。<br>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做<code>git pull</code>合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用<code>--force</code>选项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --force origin master</span><br></pre></td></tr></table></figure></p><p>上面命令使用<code>--force</code>选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用<code>--force</code>选项。</p><h3 id="【git回车换行设置】—避免Windows自动将Linux的换行符转为Windows风格，造成文件二进制不一致"><a href="#【git回车换行设置】—避免Windows自动将Linux的换行符转为Windows风格，造成文件二进制不一致" class="headerlink" title="【git回车换行设置】—避免Windows自动将Linux的换行符转为Windows风格，造成文件二进制不一致"></a>【git回车换行设置】—避免Windows自动将Linux的换行符转为Windows风格，造成文件二进制不一致</h3><blockquote><p>执行git config –list，查看所有设置<br>确保 core.autocrlf=false<br>如果不是则用如下命令修改：<br>git config –global core.autocrlf false</p></blockquote><h3 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git mv originfilename changed_filename</span><br><span class="line">git commit -m &quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="删除文件或文件夹"><a href="#删除文件或文件夹" class="headerlink" title="删除文件或文件夹"></a>删除文件或文件夹</h3><p>删除文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm filename</span><br></pre></td></tr></table></figure></p><p>删除foldername文件夹及其下所有的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm foldername -r -f</span><br></pre></td></tr></table></figure></p><p>执行完git rm后，最后再git commit -m “”，然后push即可</p><h3 id="stash的使用"><a href="#stash的使用" class="headerlink" title="stash的使用"></a>stash的使用</h3><p>有时候我们在工作区进行开发并且不想提交的时候，这时我们又想pull最新代码；或者又想切到另外一个分支上修改紧急bug的时候<br>git stash可以暂存当前的工作区内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash save &quot;stash information.&quot;</span><br></pre></td></tr></table></figure><p>等我们切到另外分支修改完了bug之后，可以切回之前分支【一定要先切回原分支再执行下面的pop或apply命令】，然后恢复之前工作区的内容继续开发：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure></p><p>也可以查看stash的Git栈信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure></p><p>当我们的stash栈列表里面有很多，并且我们想要找到对应的版本号并且将我们想要的版本号为stash@{2}的工作内容取出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply stash@&#123;2&#125;</span><br></pre></td></tr></table></figure></p><p>也可以查看版本号为stash@{2}的工作内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash show stash@&#123;2&#125;</span><br></pre></td></tr></table></figure></p><p>可以将栈清空：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash clear</span><br></pre></td></tr></table></figure></p><h3 id="查看某次提交中某个文件的改动情况"><a href="#查看某次提交中某个文件的改动情况" class="headerlink" title="查看某次提交中某个文件的改动情况"></a>查看某次提交中某个文件的改动情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show commit-id filename</span><br></pre></td></tr></table></figure><h3 id="查看分支历史"><a href="#查看分支历史" class="headerlink" title="查看分支历史"></a>查看分支历史</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog show --date=iso branchname</span><br></pre></td></tr></table></figure><h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git-rebase"></a>git-rebase</h3><blockquote><p>当从master拉完分支，修改后，发现需要合入master分支上最新的commit时，可以先提交该分支上的修改，然后checkout到master上，git pull到最新，然后切回分支，执行 git rebase master 即可。</p></blockquote><h4 id="冲突处理："><a href="#冲突处理：" class="headerlink" title="冲突处理："></a>冲突处理：</h4><blockquote><p>在进行rebase操作时，可能会遇到文件存在冲突的情况，这时git会显示出存在冲突的（CONFLICT）文件名，可以用beyondcompare进行比较，手动解决冲突后，再用git add来标识该文件冲突已解决，当冲突解决后再执行git rebase –continue即可。</p></blockquote><h4 id="合并最近两次提交"><a href="#合并最近两次提交" class="headerlink" title="合并最近两次提交"></a>合并最近两次提交</h4><blockquote><p>（1）、git rebase -i HEAD~2（合并最近2次commit）<br>（2）、执行完1后，即进入commit信息编辑界面，在这里将第一次提交改为pick，第2次提交改为squash，意思就是将第二次提交合并到第一次提交上。编辑完后输入:wq保存退出，即进入步骤3。<br>（3）、在第2步执行完后即进入注释修改界面，可以将第2次commit信息删除，将第1次commit信息修改为想要的内容，之后输入:wq保存并退出。<br>（4）、使用git log查看最近commit记录，发现最近2次提交已被合并为一个。</p></blockquote><h3 id="修改commit信息"><a href="#修改commit信息" class="headerlink" title="修改commit信息"></a>修改commit信息</h3><p>有时候我们执行<code>git commit</code>命令提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用<code>--amend</code> 选项重新提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &apos;initial commit&apos;</span><br><span class="line">$ git add forgotten_file</span><br><span class="line">$ git commit --amend -m &quot;the correct commit.&quot;</span><br></pre></td></tr></table></figure></p><p>在<code>initial commit</code>之后，如果没有文件修改遗漏，只是需要修改提交信息的话，直接跳到<code>git commit --amend -m &quot;the correct commit.&quot;</code> 即可。</p><h3 id="回退节点"><a href="#回退节点" class="headerlink" title="回退节点"></a>回退节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commitid</span><br></pre></td></tr></table></figure><h3 id="【git-clean】删除untracked-files"><a href="#【git-clean】删除untracked-files" class="headerlink" title="【git clean】删除untracked files"></a>【git clean】删除untracked files</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -f</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux手册中函数名后小括号中数字的含义</title>
      <link href="/2018/10/26/LinuxManualFunctionNum/"/>
      <url>/2018/10/26/LinuxManualFunctionNum/</url>
      
        <content type="html"><![CDATA[<p>It’s the section that the man page for the command is assigned to.</p><blockquote><ol><li><p>General commands</p></li><li><p>System calls</p></li><li><p>C library functions</p></li><li><p>Special files (usually devices, those found in /dev) and drivers</p></li><li><p>File formats and conventions</p></li><li><p>Games and screensavers</p></li><li><p>Miscellanea</p></li><li><p>System administration commands and daemons</p></li></ol></blockquote><p>Original descriptions of each section can be seen in the  <a href="https://web.archive.org/web/20170601064537/http://plan9.bell-labs.com/7thEdMan/v7vol1.pdf" target="_blank" rel="noopener"><font color="blue">Unix Programmer’s Manual</font></a> (page ii).</p>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux api </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>首次使用Github</title>
      <link href="/2018/10/25/FirstToUseGitHub/"/>
      <url>/2018/10/25/FirstToUseGitHub/</url>
      
        <content type="html"><![CDATA[<h2 id="1、配置用户名和邮箱"><a href="#1、配置用户名和邮箱" class="headerlink" title="1、配置用户名和邮箱"></a>1、配置用户名和邮箱</h2><img src="/2018/10/25/FirstToUseGitHub/ConfigUserNameAndEmail.png" title="pic:配置用户名和邮箱"><h2 id="2、创建SSH-KEY"><a href="#2、创建SSH-KEY" class="headerlink" title="2、创建SSH-KEY"></a>2、创建SSH-KEY</h2><img src="/2018/10/25/FirstToUseGitHub/CreateSSH-KEY.png" title="pic:创建SSH-KEY"><p>然后系统提示输入文件保存位置等信息，连续敲三次回车即可<br>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有<strong>id_rsa</strong>和<strong>id_rsa.pub</strong>两个文件，这两个就是SSH Key的秘钥对，<strong>id_rsa是私钥</strong>，不能泄露出去，<strong>id_rsa.pub是公钥</strong>，可以放心地告诉任何人。</p><blockquote><ul><li>Linux下生成的SSH key文件保存在中～/.ssh/id_rsa.pub </li><li>Windows下保存在C:\Users\lzw.ssh</li></ul></blockquote><h2 id="3、添加SSH-KEY到github"><a href="#3、添加SSH-KEY到github" class="headerlink" title="3、添加SSH-KEY到github"></a>3、添加SSH-KEY到github</h2><p>然后用文本编辑工具打开该公钥文件，使用notepad++或者sublime。不要使用记事本打开，因为记事本的默认编码不是utf-8，拷贝里面的全部内容，将它粘帖到github帐号管理中的添加SSH key界面中。<br>打开github帐号管理中的添加SSH key界面的步骤如下：</p><blockquote><p>1、登录github</p><p>2、点击右上方的Accounting settings图标</p><p>3、选择 SSH key </p><p>4、点击 Add SSH key</p></blockquote><p>在出现的界面中填写SSH key的名称，填一个你自己喜欢的名称即可，然后将上面拷贝的~/.ssh/id_rsa.pub文件内容粘帖到key一栏，在点击“add key”按钮就可以了。<br>添加过程github会提示你输入一次你的github密码</p><h2 id="4、验证SSH-KEY是否生效"><a href="#4、验证SSH-KEY是否生效" class="headerlink" title="4、验证SSH-KEY是否生效"></a>4、验证SSH-KEY是否生效</h2><p>验证SSH-KEY是否添加成功：</p><img src="/2018/10/25/FirstToUseGitHub/CheckSSH-KEY.png" title="pic:验证SSH-KEY是否生效"><p>看到You’ve successfully authenticated，则表示SSH-KEY已添加成功并生效！</p>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>魔方_CFOP教程</title>
      <link href="/2018/10/24/Rubik-CFOP/"/>
      <url>/2018/10/24/Rubik-CFOP/</url>
      
        <content type="html"><![CDATA[<h2 id="魔方的公式说明"><a href="#魔方的公式说明" class="headerlink" title="魔方的公式说明"></a>魔方的公式说明</h2><h3 id="魔方的某个面"><a href="#魔方的某个面" class="headerlink" title="魔方的某个面"></a>魔方的某个面</h3><img src="/2018/10/24/Rubik-CFOP/Face_1.png" title="pic:魔方的某个面-1"><img src="/2018/10/24/Rubik-CFOP/Face_2.png" title="pic:魔方的某个面-2"><h3 id="整个魔方"><a href="#整个魔方" class="headerlink" title="整个魔方"></a>整个魔方</h3><img src="/2018/10/24/Rubik-CFOP/AllCube_1.png" title="pic:整个魔方"><h3 id="魔方双层转"><a href="#魔方双层转" class="headerlink" title="魔方双层转"></a>魔方双层转</h3><img src="/2018/10/24/Rubik-CFOP/TwoLayer_1.png" title="pic:魔方双层转-1"><img src="/2018/10/24/Rubik-CFOP/TwoLayer_2.png" title="pic:魔方双层转-2"><h3 id="中间层"><a href="#中间层" class="headerlink" title="中间层"></a>中间层</h3><img src="/2018/10/24/Rubik-CFOP/MidLayer_1.png" title="pic:中间层"><h2 id="OLL公式"><a href="#OLL公式" class="headerlink" title="OLL公式"></a>OLL公式</h2><img src="/2018/10/24/Rubik-CFOP/OLL.png" title="pic:OLL"><h2 id="PLL公式"><a href="#PLL公式" class="headerlink" title="PLL公式"></a>PLL公式</h2><img src="/2018/10/24/Rubik-CFOP/PLL_1.png" title="pic:PLL-1"><img src="/2018/10/24/Rubik-CFOP/PLL_2.png" title="pic:PLL-2"><img src="/2018/10/24/Rubik-CFOP/PLL_3.png" title="pic:PLL-3">]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Windows Ping加时间戳</title>
      <link href="/2018/10/21/AddTimeStampDuringPing/"/>
      <url>/2018/10/21/AddTimeStampDuringPing/</url>
      
        <content type="html"><![CDATA[<h3 id="在c盘下面新建文件-ping-vbs，在-ping-vbs中输入代码如下"><a href="#在c盘下面新建文件-ping-vbs，在-ping-vbs中输入代码如下" class="headerlink" title="在c盘下面新建文件 ping.vbs，在 ping.vbs中输入代码如下:"></a>在c盘下面新建文件 ping.vbs，在 ping.vbs中输入代码如下:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Dim args, flag, unsuccOut</span><br><span class="line">args=<span class="string">""</span></span><br><span class="line">otherout=<span class="string">""</span></span><br><span class="line">flag=0</span><br><span class="line"> </span><br><span class="line">If WScript.Arguments.count = 0 Then</span><br><span class="line">WScript.Echo <span class="string">"Usage: cscript tping.vbs [-t] [-a] [-n count] [-l size] [-f] [-i TTL] [-v TOS]"</span></span><br><span class="line">WScript.Echo <span class="string">"                         [-s count] [[-j host-list] | [-k host-list]]"</span></span><br><span class="line">WScript.Echo <span class="string">"                         [-r count] [-w timeout] destination-list"</span></span><br><span class="line">wscript.quit</span><br><span class="line">End <span class="keyword">if</span></span><br><span class="line"> </span><br><span class="line">For i=0 to WScript.Arguments.count - 1</span><br><span class="line">args=args &amp; <span class="string">" "</span> &amp; WScript.Arguments(i)</span><br><span class="line">Next</span><br><span class="line"> </span><br><span class="line">Set shell = WScript.CreateObject(<span class="string">"WScript.Shell"</span>)</span><br><span class="line">Set re=New RegExp</span><br><span class="line">re.Pattern=<span class="string">"^Reply|^Request|^来自|^请求"</span></span><br><span class="line"> </span><br><span class="line">Set myping=shell.Exec(<span class="string">"ping"</span> &amp; args)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> Not myping.StdOut.AtEndOfStream</span><br><span class="line">   strLine=myping.StdOut.ReadLine()</span><br><span class="line"><span class="string">'WScript.Echo  "原数据" &amp; chr(9) &amp; strLine</span></span><br><span class="line"><span class="string">   r=re.Test(strLine)</span></span><br><span class="line"><span class="string">   If r Then</span></span><br><span class="line"><span class="string">WScript.Echo date &amp; " "&amp; time &amp; chr(9) &amp; strLine</span></span><br><span class="line"><span class="string">flag=1</span></span><br><span class="line"><span class="string">   Else</span></span><br><span class="line"><span class="string">unsuccOut=unsuccOut &amp; strLine</span></span><br><span class="line"><span class="string">   End if</span></span><br><span class="line"><span class="string">Wend</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">if flag = 0 then</span></span><br><span class="line"><span class="string">WScript.Echo unsuccOut</span></span><br><span class="line"><span class="string">end if</span></span><br></pre></td></tr></table></figure><h3 id="切到脚本所在目录，然后调出cmd，执行如下命令"><a href="#切到脚本所在目录，然后调出cmd，执行如下命令" class="headerlink" title="切到脚本所在目录，然后调出cmd，执行如下命令:"></a>切到脚本所在目录，然后调出cmd，执行如下命令:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript ping.vbs www.baidu.com -t -l 1000 -w 5000&gt;sseping.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 工具、技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Office常见问题及解决方法</title>
      <link href="/2018/10/21/OfficeProblemAndSolution/"/>
      <url>/2018/10/21/OfficeProblemAndSolution/</url>
      
        <content type="html"><![CDATA[<h2 id="OneNote"><a href="#OneNote" class="headerlink" title="OneNote"></a>OneNote</h2><h3 id="1、OneNote粘贴的图片比较模糊"><a href="#1、OneNote粘贴的图片比较模糊" class="headerlink" title="1、OneNote粘贴的图片比较模糊"></a>1、OneNote粘贴的图片比较模糊</h3><blockquote><p>问题原因：Microsoft为了使OneNote排版美观，在粘贴一些尺寸较大的图片时，会将图片进行缩放。<br>解决方法：右键-&gt;还原为原始尺寸</p></blockquote><h2 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h2><h3 id="1、对一列应用同一个公式"><a href="#1、对一列应用同一个公式" class="headerlink" title="1、对一列应用同一个公式"></a>1、对一列应用同一个公式</h3><blockquote><p>方法：鼠标移动到第一个单元格的右下角，变成十字架后，双击鼠标</p></blockquote><h3 id="2、分屏显示两个excel表格"><a href="#2、分屏显示两个excel表格" class="headerlink" title="2、分屏显示两个excel表格"></a>2、分屏显示两个excel表格</h3><blockquote><p>方法：每次都从开始菜单找到Excel，单独打开文件，就可以把每个文件放到单独的窗口中分屏显示了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具安装及使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具、技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows支持多用户远程连接</title>
      <link href="/2018/10/20/WindowsRemoteConnect/"/>
      <url>/2018/10/20/WindowsRemoteConnect/</url>
      
        <content type="html"><![CDATA[<h3 id="Windows默认情况下仅支持一个用户通过远程桌面连接，当多个用户需要同时连接同一个PC时，需要修改最大连接数限制，步骤如下："><a href="#Windows默认情况下仅支持一个用户通过远程桌面连接，当多个用户需要同时连接同一个PC时，需要修改最大连接数限制，步骤如下：" class="headerlink" title="Windows默认情况下仅支持一个用户通过远程桌面连接，当多个用户需要同时连接同一个PC时，需要修改最大连接数限制，步骤如下："></a>Windows默认情况下仅支持一个用户通过远程桌面连接，当多个用户需要同时连接同一个PC时，需要修改最大连接数限制，步骤如下：</h3><blockquote><p>1、点击 开始–&gt;运行–&gt;输入”gpedit.msc”，进入本地组策略编辑器</p><p>2、点击 计算机配置–&gt;管理模板–&gt;Windows组件–&gt;远程桌面服务–&gt;远程桌面会话主机–&gt;连接–&gt;限制连接的数量</p><p>3、点击 启用，输入最大连接数</p></blockquote><img src="/2018/10/20/WindowsRemoteConnect/RemoteConnectNumSet.png" title="SetMaxConnectNum">]]></content>
      
      
      
        <tags>
            
            <tag> 工具、技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件校验和（Hash）的计算</title>
      <link href="/2018/10/20/CalcFileHash/"/>
      <url>/2018/10/20/CalcFileHash/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Windows系统"><a href="#1、Windows系统" class="headerlink" title="1、Windows系统"></a>1、Windows系统</h2><h3 id="工具名：certutil-–Windows内置的Hash计算工具"><a href="#工具名：certutil-–Windows内置的Hash计算工具" class="headerlink" title="工具名：certutil –Windows内置的Hash计算工具"></a>工具名：certutil –Windows内置的Hash计算工具</h3><h3 id="用法：certutil-hashfile-pathToFileToCheck-HashAlgorithm"><a href="#用法：certutil-hashfile-pathToFileToCheck-HashAlgorithm" class="headerlink" title="用法：certutil -hashfile pathToFileToCheck  [HashAlgorithm]"></a>用法：certutil -hashfile pathToFileToCheck  [HashAlgorithm]</h3><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><blockquote><ul><li>pathToFileToCheck -待计算校验和的文件</li></ul></blockquote><blockquote><ul><li>HashAlgorithm - Hash算法，目前该工具有以下几种选项：MD2 MD4 MD5 SHA1 SHA256 SHA384 SHA512</li></ul></blockquote><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><img src="/2018/10/20/CalcFileHash/calcfilehash.png" title="pic:CalcFileHash 553 78"><h2 id="2、Linux系统"><a href="#2、Linux系统" class="headerlink" title="2、Linux系统"></a>2、Linux系统</h2><h3 id="md5sum-等命令"><a href="#md5sum-等命令" class="headerlink" title="md5sum 等命令"></a>md5sum 等命令</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 小工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MarkDown基本语法</title>
      <link href="/2018/10/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/10/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎使用-Cmd-Markdown-编辑阅读器"><a href="#欢迎使用-Cmd-Markdown-编辑阅读器" class="headerlink" title="欢迎使用 Cmd Markdown 编辑阅读器"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr><p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p><blockquote><ul><li>整理知识，学习笔记</li><li>发布日记，杂文，所见所想</li><li>撰写发布技术文稿（代码支持）</li><li>撰写发布学术论文（LaTeX 公式支持）</li></ul></blockquote><p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p><p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p><h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="noopener">Windows/Mac/Linux 全平台客户端</a></h3><blockquote><p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p></blockquote><hr><h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p><h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="noopener">Todo 列表</a></h3><ul><li style="list-style: none"><input type="checkbox"> 支持以 PDF 格式导出文稿</li><li style="list-style: none"><input type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li style="list-style: none"><input type="checkbox" checked> 新增 Todo 列表功能</li><li style="list-style: none"><input type="checkbox" checked> 修复 LaTex 公式渲染问题</li><li style="list-style: none"><input type="checkbox" checked> 新增 LaTex 公式编号功能</li></ul><h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p><h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="noopener">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="noopener">序列图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h3 id="6-高效绘制-甘特图"><a href="#6-高效绘制-甘特图" class="headerlink" title="6. 高效绘制 甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图" target="_blank" rel="noopener">甘特图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure><h3 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h3><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">\$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">\$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">\$1</td><td style="text-align:center">234</td></tr></tbody></table><h3 id="8-更详细语法说明"><a href="#8-更详细语法说明" class="headerlink" title="8. 更详细语法说明"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="noopener">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p><p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p><hr><h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p><h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p><h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p><p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p><h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p><h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p><h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p><h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p><p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p><p>通过管理工具栏可以：</p><p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p><h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p><p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p><p>工具栏上的五个图标依次为：</p><p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p><h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p><h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p><p>标签： 未分类</p><p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p><p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p><h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p><hr><p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p><p>2016 年 07月 07日    </p><p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p><p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>链接收藏</title>
      <link href="/2018/10/17/hellocgc/"/>
      <url>/2018/10/17/hellocgc/</url>
      
        <content type="html"><![CDATA[<ul><li>阮一峰-<a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" target="_blank" rel="noopener"><font color="blue">RSA算法原理</font></a></li><li>陈皓-<a href="https://coolshell.cn/articles/7459.html" target="_blank" rel="noopener"><font color="blue"> HUFFMAN 编码压缩算法</font></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 链接收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链接、收藏 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
